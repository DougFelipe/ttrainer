##############################
# Variáveis globais 
##############################
variables:
  REGISTRY_IMAGE: "registry.gitlab.com/dougfelipe/ttrainer"

# Stages do pipeline
stages:
  - lint       # Verifica estilo e qualidade do código
  - test       # Executa os testes automatizados com cobertura
  - build      # Gera o build de produção com Vite
  - docker     # Constrói a imagem Docker (com tag temporária)
  - deploy     # Faz o push da imagem para o GitLab Container Registry


# Imagem base para todos os jobs (Node.js 20)
default:
  image: node:20

  # Cache por branch
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .vite/

##############################
# 1. Etapa de Linting (ESLint)
##############################
lint:
  stage: lint
  script:
    - npm ci                     
    - npm run lint || true             
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_MERGE_REQUEST_ID'

##############################
# 2. Etapa de Testes (Vitest)
##############################
test:
  stage: test
  script:
    - npm ci
    - npm run test:coverage
  artifacts:
    paths:
      - coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_MERGE_REQUEST_ID'

##############################
# 3. Etapa de Build (Vite)
##############################
build:
  stage: build
  script:
    - npm ci
    - npm run build              # Gera a aplicação final em /dist
  artifacts:
    paths:
      - dist/                    # Salva a pasta dist como artefato
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_MERGE_REQUEST_ID'

##############################
# 4. Build da imagem Docker
##############################
docker_build:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t "$REGISTRY_IMAGE:temp-build" .
  dependencies:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

##############################
# 5. Push para o Container Registry 
##############################
docker_push:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker push "$REGISTRY_IMAGE:temp-build"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'